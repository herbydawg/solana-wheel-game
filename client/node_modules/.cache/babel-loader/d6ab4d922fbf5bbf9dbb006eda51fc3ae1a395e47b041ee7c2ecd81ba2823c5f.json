{"ast":null,"code":"var _jsxFileName = \"c:\\\\Users\\\\jakob\\\\Documents\\\\clips\\\\client\\\\src\\\\components\\\\CountdownTimer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CountdownTimer = ({\n  timeRemaining,\n  gameState\n}) => {\n  _s();\n  const [displayTime, setDisplayTime] = useState('00:00');\n  const [localTimeRemaining, setLocalTimeRemaining] = useState(0);\n  const totalTime = 5 * 60 * 1000; // 5 minutes in ms\n\n  // Update local time when server time changes - ensure proper reset\n  useEffect(() => {\n    console.log('CountdownTimer received timeRemaining:', timeRemaining, 'gameState:', gameState);\n    if (timeRemaining && timeRemaining > 0) {\n      // Accept any reasonable countdown value (up to 10 minutes to be safe)\n      if (timeRemaining <= 10 * 60 * 1000) {\n        console.log('Setting localTimeRemaining to:', timeRemaining);\n        setLocalTimeRemaining(timeRemaining);\n      }\n    } else if (timeRemaining === 0 || timeRemaining === null || timeRemaining === undefined) {\n      console.log('Setting localTimeRemaining to 0');\n      setLocalTimeRemaining(0);\n    }\n  }, [timeRemaining, gameState]);\n\n  // Smooth countdown using client-side timer\n  useEffect(() => {\n    if (gameState === 'waiting' && localTimeRemaining > 0) {\n      const interval = setInterval(() => {\n        setLocalTimeRemaining(prev => {\n          if (prev <= 1000) {\n            clearInterval(interval);\n            return 0;\n          }\n          return prev - 1000;\n        });\n      }, 1000);\n      return () => clearInterval(interval);\n    }\n  }, [gameState, localTimeRemaining]);\n  useEffect(() => {\n    if (localTimeRemaining && localTimeRemaining > 0) {\n      // Calculate display time\n      const totalSeconds = Math.floor(localTimeRemaining / 1000);\n      const minutes = Math.floor(totalSeconds / 60);\n      const seconds = totalSeconds % 60;\n      setDisplayTime(`${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`);\n    } else {\n      setDisplayTime('00:00');\n    }\n  }, [localTimeRemaining, gameState, totalTime]);\n  const getStatusText = () => {\n    switch (gameState) {\n      case 'spinning':\n        return 'SPINNING...';\n      case 'processing':\n        return 'PROCESSING...';\n      case 'completed':\n        return 'COMPLETED';\n      case 'paused':\n        return 'PAUSED';\n      default:\n        return 'NEXT SPIN IN';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(motion.div, {\n    initial: {\n      opacity: 0,\n      scale: 0.8\n    },\n    animate: {\n      opacity: 1,\n      scale: 1\n    },\n    className: \"flex flex-col items-center mb-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center mb-2\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-gray-400 text-sm font-medium mb-2\",\n        children: getStatusText()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), gameState === 'waiting' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-white text-4xl lg:text-5xl font-bold font-cyber mb-2\",\n        children: displayTime\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), (gameState === 'spinning' || gameState === 'processing') && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center mb-2\",\n      children: /*#__PURE__*/_jsxDEV(motion.div, {\n        animate: gameState === 'spinning' ? {\n          rotate: 360\n        } : {\n          scale: [1, 1.2, 1]\n        },\n        transition: gameState === 'spinning' ? {\n          duration: 1,\n          repeat: Infinity,\n          ease: 'linear'\n        } : {\n          duration: 1,\n          repeat: Infinity\n        },\n        className: \"text-4xl lg:text-5xl mb-2\",\n        children: gameState === 'spinning' ? 'ðŸŽ°' : 'âš¡'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"glass px-4 py-2 rounded-full\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-gray-400 text-sm\",\n          children: gameState === 'waiting' ? 'Auto-spin 5min' : gameState === 'spinning' ? 'Selecting Winner...' : gameState === 'processing' ? 'Processing Payout...' : 'Updated'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(CountdownTimer, \"O+EGu0R1ccoHFhwbrTUWbSFeLqw=\");\n_c = CountdownTimer;\nexport default CountdownTimer;\nvar _c;\n$RefreshReg$(_c, \"CountdownTimer\");","map":{"version":3,"names":["React","useState","useEffect","motion","jsxDEV","_jsxDEV","CountdownTimer","timeRemaining","gameState","_s","displayTime","setDisplayTime","localTimeRemaining","setLocalTimeRemaining","totalTime","console","log","undefined","interval","setInterval","prev","clearInterval","totalSeconds","Math","floor","minutes","seconds","toString","padStart","getStatusText","div","initial","opacity","scale","animate","className","children","fileName","_jsxFileName","lineNumber","columnNumber","rotate","transition","duration","repeat","Infinity","ease","_c","$RefreshReg$"],"sources":["c:/Users/jakob/Documents/clips/client/src/components/CountdownTimer.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { motion } from 'framer-motion';\r\n\r\nconst CountdownTimer = ({ timeRemaining, gameState }) => {\r\n  const [displayTime, setDisplayTime] = useState('00:00');\r\n  const [localTimeRemaining, setLocalTimeRemaining] = useState(0);\r\n  const totalTime = 5 * 60 * 1000; // 5 minutes in ms\r\n\r\n  // Update local time when server time changes - ensure proper reset\r\n  useEffect(() => {\r\n    console.log('CountdownTimer received timeRemaining:', timeRemaining, 'gameState:', gameState);\r\n\r\n    if (timeRemaining && timeRemaining > 0) {\r\n      // Accept any reasonable countdown value (up to 10 minutes to be safe)\r\n      if (timeRemaining <= 10 * 60 * 1000) {\r\n        console.log('Setting localTimeRemaining to:', timeRemaining);\r\n        setLocalTimeRemaining(timeRemaining);\r\n      }\r\n    } else if (timeRemaining === 0 || timeRemaining === null || timeRemaining === undefined) {\r\n      console.log('Setting localTimeRemaining to 0');\r\n      setLocalTimeRemaining(0);\r\n    }\r\n  }, [timeRemaining, gameState]);\r\n\r\n  // Smooth countdown using client-side timer\r\n  useEffect(() => {\r\n    if (gameState === 'waiting' && localTimeRemaining > 0) {\r\n      const interval = setInterval(() => {\r\n        setLocalTimeRemaining(prev => {\r\n          if (prev <= 1000) {\r\n            clearInterval(interval);\r\n            return 0;\r\n          }\r\n          return prev - 1000;\r\n        });\r\n      }, 1000);\r\n\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [gameState, localTimeRemaining]);\r\n\r\n  useEffect(() => {\r\n    if (localTimeRemaining && localTimeRemaining > 0) {\r\n      // Calculate display time\r\n      const totalSeconds = Math.floor(localTimeRemaining / 1000);\r\n      const minutes = Math.floor(totalSeconds / 60);\r\n      const seconds = totalSeconds % 60;\r\n\r\n      setDisplayTime(`${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`);\r\n    } else {\r\n      setDisplayTime('00:00');\r\n    }\r\n  }, [localTimeRemaining, gameState, totalTime]);\r\n\r\n\r\n  const getStatusText = () => {\r\n    switch (gameState) {\r\n      case 'spinning': return 'SPINNING...';\r\n      case 'processing': return 'PROCESSING...';\r\n      case 'completed': return 'COMPLETED';\r\n      case 'paused': return 'PAUSED';\r\n      default: return 'NEXT SPIN IN';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <motion.div\r\n      initial={{ opacity: 0, scale: 0.8 }}\r\n      animate={{ opacity: 1, scale: 1 }}\r\n      className=\"flex flex-col items-center mb-4\"\r\n    >\r\n      {/* Status Text */}\r\n      <div className=\"text-center mb-2\">\r\n        <div className=\"text-gray-400 text-sm font-medium mb-2\">\r\n          {getStatusText()}\r\n        </div>\r\n        {gameState === 'waiting' && (\r\n          <div className=\"text-white text-4xl lg:text-5xl font-bold font-cyber mb-2\">\r\n            {displayTime}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Large Timer Display for other states */}\r\n      {(gameState === 'spinning' || gameState === 'processing') && (\r\n        <div className=\"text-center mb-2\">\r\n          <motion.div\r\n            animate={gameState === 'spinning' ? { rotate: 360 } : { scale: [1, 1.2, 1] }}\r\n            transition={gameState === 'spinning' ?\r\n              { duration: 1, repeat: Infinity, ease: 'linear' } :\r\n              { duration: 1, repeat: Infinity }\r\n            }\r\n            className=\"text-4xl lg:text-5xl mb-2\"\r\n          >\r\n            {gameState === 'spinning' ? 'ðŸŽ°' : 'âš¡'}\r\n          </motion.div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Additional Info */}\r\n      <div className=\"text-center\">\r\n        <div className=\"glass px-4 py-2 rounded-full\">\r\n          <span className=\"text-gray-400 text-sm\">\r\n            {gameState === 'waiting' ? 'Auto-spin 5min' :\r\n             gameState === 'spinning' ? 'Selecting Winner...' :\r\n             gameState === 'processing' ? 'Processing Payout...' :\r\n             'Updated'}\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </motion.div>\r\n  );\r\n};\r\n\r\nexport default CountdownTimer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}