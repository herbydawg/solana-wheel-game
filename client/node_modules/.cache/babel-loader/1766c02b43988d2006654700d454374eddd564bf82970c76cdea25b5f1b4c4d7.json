{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jakob\\\\Documents\\\\clips\\\\client\\\\src\\\\contexts\\\\GameContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { useSocket } from './SocketContext';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameContext = /*#__PURE__*/createContext();\nexport const useGame = () => {\n  _s();\n  const context = useContext(GameContext);\n  if (!context) {\n    throw new Error('useGame must be used within a GameProvider');\n  }\n  return context;\n};\n\n// Game state reducer\n_s(useGame, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nconst gameReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_GAME_STATE':\n      return {\n        ...state,\n        gameState: action.payload.gameState,\n        currentPot: action.payload.currentPot,\n        nextSpinTime: action.payload.nextSpinTime,\n        currentGame: action.payload.currentGame,\n        recentGames: action.payload.recentGames,\n        isRunning: action.payload.isRunning,\n        spinInterval: action.payload.spinInterval\n      };\n    case 'SET_HOLDER_STATS':\n      return {\n        ...state,\n        holderStats: action.payload\n      };\n    case 'SET_WHEEL_DATA':\n      return {\n        ...state,\n        wheelData: action.payload\n      };\n    case 'SET_COUNTDOWN':\n      return {\n        ...state,\n        countdown: action.payload\n      };\n    case 'SET_SPINNING':\n      return {\n        ...state,\n        isSpinning: action.payload\n      };\n    case 'SET_WINNER':\n      return {\n        ...state,\n        currentWinner: action.payload,\n        isSpinning: false\n      };\n    case 'SET_LOADING':\n      return {\n        ...state,\n        loading: action.payload\n      };\n    case 'SET_ERROR':\n      return {\n        ...state,\n        error: action.payload,\n        loading: false\n      };\n    case 'CLEAR_ERROR':\n      return {\n        ...state,\n        error: null\n      };\n    case 'SET_SOL_PRICE':\n      return {\n        ...state,\n        solPrice: action.payload\n      };\n    default:\n      return state;\n  }\n};\nconst initialState = {\n  gameState: 'waiting',\n  currentPot: 0,\n  nextSpinTime: null,\n  currentGame: null,\n  recentGames: [],\n  isRunning: false,\n  spinInterval: 5,\n  holderStats: null,\n  wheelData: null,\n  countdown: null,\n  isSpinning: false,\n  currentWinner: null,\n  loading: true,\n  error: null,\n  solPrice: 180 // Default fallback price\n};\nexport const GameProvider = ({\n  children\n}) => {\n  _s2();\n  const [state, dispatch] = useReducer(gameReducer, initialState);\n  const {\n    socket,\n    isConnected,\n    gameState,\n    holderStats,\n    countdown\n  } = useSocket();\n\n  // API base URL\n  const API_BASE = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n  // Update state from socket context\n  useEffect(() => {\n    if (gameState) {\n      dispatch({\n        type: 'SET_GAME_STATE',\n        payload: gameState\n      });\n    }\n  }, [gameState]);\n  useEffect(() => {\n    if (holderStats) {\n      dispatch({\n        type: 'SET_HOLDER_STATS',\n        payload: holderStats\n      });\n    }\n  }, [holderStats]);\n  useEffect(() => {\n    if (countdown) {\n      dispatch({\n        type: 'SET_COUNTDOWN',\n        payload: countdown\n      });\n    }\n  }, [countdown]);\n\n  // Socket event handlers\n  useEffect(() => {\n    if (!socket) return;\n    const handleSpinStart = data => {\n      dispatch({\n        type: 'SET_SPINNING',\n        payload: true\n      });\n    };\n    const handleWinnerSelected = data => {\n      dispatch({\n        type: 'SET_WINNER',\n        payload: data.winner\n      });\n    };\n    const handlePayoutCompleted = data => {\n      // Refresh game state after payout\n      fetchGameState();\n    };\n    socket.on('spinStart', handleSpinStart);\n    socket.on('winnerSelected', handleWinnerSelected);\n    socket.on('payoutCompleted', handlePayoutCompleted);\n    return () => {\n      socket.off('spinStart', handleSpinStart);\n      socket.off('winnerSelected', handleWinnerSelected);\n      socket.off('payoutCompleted', handlePayoutCompleted);\n    };\n  }, [socket]);\n\n  // API functions\n  const fetchGameState = async () => {\n    try {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n      const response = await axios.get(`${API_BASE}/game/state`);\n      if (response.data.success) {\n        dispatch({\n          type: 'SET_GAME_STATE',\n          payload: response.data.data\n        });\n      }\n    } catch (error) {\n      console.warn('Backend not available, using demo data');\n      // Provide demo data when backend is not available\n      const demoData = {\n        gameState: 'waiting',\n        currentPot: 0.5,\n        nextSpinTime: new Date(Date.now() + 5 * 60 * 1000),\n        currentGame: null,\n        recentGames: [],\n        isRunning: false,\n        spinInterval: 5\n      };\n      dispatch({\n        type: 'SET_GAME_STATE',\n        payload: demoData\n      });\n    } finally {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n    }\n  };\n  const fetchWheelData = async () => {\n    try {\n      const response = await axios.get(`${API_BASE}/game/wheel-data`);\n      if (response.data.success) {\n        dispatch({\n          type: 'SET_WHEEL_DATA',\n          payload: response.data.data\n        });\n      }\n    } catch (error) {\n      console.warn('Backend not available, using demo wheel data');\n      // Provide demo wheel data\n      const demoWheelData = {\n        distribution: [{\n          address: 'Demo1...abcd',\n          balance: 1000000,\n          percentage: 25\n        }, {\n          address: 'Demo2...efgh',\n          balance: 800000,\n          percentage: 20\n        }, {\n          address: 'Demo3...ijkl',\n          balance: 600000,\n          percentage: 15\n        }, {\n          address: 'Demo4...mnop',\n          balance: 400000,\n          percentage: 10\n        }, {\n          address: 'Demo5...qrst',\n          balance: 200000,\n          percentage: 5\n        }, {\n          address: 'Demo6...uvwx',\n          balance: 200000,\n          percentage: 5\n        }, {\n          address: 'Demo7...yzab',\n          balance: 200000,\n          percentage: 5\n        }, {\n          address: 'Demo8...cdef',\n          balance: 200000,\n          percentage: 5\n        }, {\n          address: 'Demo9...ghij',\n          balance: 200000,\n          percentage: 5\n        }, {\n          address: 'Demo10...klmn',\n          balance: 200000,\n          percentage: 5\n        }],\n        totalEligible: 10,\n        minimumHold: 100000\n      };\n      dispatch({\n        type: 'SET_WHEEL_DATA',\n        payload: demoWheelData\n      });\n    }\n  };\n  const fetchHolderStats = async () => {\n    try {\n      const response = await axios.get(`${API_BASE}/holders/stats`);\n      if (response.data.success) {\n        dispatch({\n          type: 'SET_HOLDER_STATS',\n          payload: response.data.data\n        });\n      }\n    } catch (error) {\n      console.warn('Backend not available, using demo holder stats');\n      // Provide demo holder stats\n      const demoHolderStats = {\n        totalHolders: 150,\n        eligibleHolders: 45,\n        totalSupply: 4000000,\n        minimumHoldAmount: 100000,\n        minimumHoldPercentage: 0.1,\n        lastUpdate: new Date(),\n        isTracking: false,\n        topHolders: [{\n          address: 'Demo1...abcd',\n          balance: 1000000,\n          percentage: 25,\n          isEligible: true\n        }, {\n          address: 'Demo2...efgh',\n          balance: 800000,\n          percentage: 20,\n          isEligible: true\n        }, {\n          address: 'Demo3...ijkl',\n          balance: 600000,\n          percentage: 15,\n          isEligible: true\n        }]\n      };\n      dispatch({\n        type: 'SET_HOLDER_STATS',\n        payload: demoHolderStats\n      });\n    }\n  };\n  const fetchGameHistory = async (limit = 10) => {\n    try {\n      const response = await axios.get(`${API_BASE}/game/history?limit=${limit}`);\n      if (response.data.success) {\n        return response.data.data;\n      }\n    } catch (error) {\n      console.error('Failed to fetch game history:', error);\n      return [];\n    }\n  };\n  const fetchPayoutHistory = async (limit = 20) => {\n    try {\n      const response = await axios.get(`${API_BASE}/transactions/payouts?limit=${limit}`);\n      if (response.data.success) {\n        return response.data.data;\n      }\n    } catch (error) {\n      console.error('Failed to fetch payout history:', error);\n      return [];\n    }\n  };\n  const checkHolderEligibility = async address => {\n    try {\n      const response = await axios.get(`${API_BASE}/holders/check/${address}`);\n      if (response.data.success) {\n        return response.data.data;\n      }\n    } catch (error) {\n      console.error('Failed to check holder eligibility:', error);\n      return null;\n    }\n  };\n\n  // Initialize data on mount\n  useEffect(() => {\n    // Always try to fetch data, even if not connected initially\n    fetchGameState();\n    fetchWheelData();\n    fetchHolderStats();\n  }, []);\n\n  // Utility functions\n  const formatAddress = address => {\n    if (!address) return '';\n    return `${address.slice(0, 4)}...${address.slice(-4)}`;\n  };\n  const formatSOL = lamports => {\n    return (lamports / 1000000000).toFixed(4);\n  };\n  const formatTimeRemaining = milliseconds => {\n    if (!milliseconds || milliseconds <= 0) return '00:00';\n    const totalSeconds = Math.floor(milliseconds / 1000);\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = totalSeconds % 60;\n    return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n  };\n  const getGameStatusColor = status => {\n    switch (status) {\n      case 'waiting':\n        return 'text-blue-400';\n      case 'spinning':\n        return 'text-yellow-400';\n      case 'processing':\n        return 'text-purple-400';\n      case 'completed':\n        return 'text-green-400';\n      case 'paused':\n        return 'text-red-400';\n      default:\n        return 'text-gray-400';\n    }\n  };\n  const value = {\n    ...state,\n    isConnected,\n    fetchGameState,\n    fetchWheelData,\n    fetchHolderStats,\n    fetchGameHistory,\n    fetchPayoutHistory,\n    checkHolderEligibility,\n    formatAddress,\n    formatSOL,\n    formatTimeRemaining,\n    getGameStatusColor,\n    clearError: () => dispatch({\n      type: 'CLEAR_ERROR'\n    })\n  };\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 337,\n    columnNumber: 5\n  }, this);\n};\n_s2(GameProvider, \"OZNTFlY5jexwKDgU2C6VJrOSSQA=\", false, function () {\n  return [useSocket];\n});\n_c = GameProvider;\nvar _c;\n$RefreshReg$(_c, \"GameProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","useSocket","axios","jsxDEV","_jsxDEV","GameContext","useGame","_s","context","Error","gameReducer","state","action","type","gameState","payload","currentPot","nextSpinTime","currentGame","recentGames","isRunning","spinInterval","holderStats","wheelData","countdown","isSpinning","currentWinner","loading","error","solPrice","initialState","GameProvider","children","_s2","dispatch","socket","isConnected","API_BASE","process","env","REACT_APP_API_URL","handleSpinStart","data","handleWinnerSelected","winner","handlePayoutCompleted","fetchGameState","on","off","response","get","success","console","warn","demoData","Date","now","fetchWheelData","demoWheelData","distribution","address","balance","percentage","totalEligible","minimumHold","fetchHolderStats","demoHolderStats","totalHolders","eligibleHolders","totalSupply","minimumHoldAmount","minimumHoldPercentage","lastUpdate","isTracking","topHolders","isEligible","fetchGameHistory","limit","fetchPayoutHistory","checkHolderEligibility","formatAddress","slice","formatSOL","lamports","toFixed","formatTimeRemaining","milliseconds","totalSeconds","Math","floor","minutes","seconds","toString","padStart","getGameStatusColor","status","value","clearError","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/jakob/Documents/clips/client/src/contexts/GameContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\r\nimport { useSocket } from './SocketContext';\r\nimport axios from 'axios';\r\n\r\nconst GameContext = createContext();\r\n\r\nexport const useGame = () => {\r\n  const context = useContext(GameContext);\r\n  if (!context) {\r\n    throw new Error('useGame must be used within a GameProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\n// Game state reducer\r\nconst gameReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'SET_GAME_STATE':\r\n      return {\r\n        ...state,\r\n        gameState: action.payload.gameState,\r\n        currentPot: action.payload.currentPot,\r\n        nextSpinTime: action.payload.nextSpinTime,\r\n        currentGame: action.payload.currentGame,\r\n        recentGames: action.payload.recentGames,\r\n        isRunning: action.payload.isRunning,\r\n        spinInterval: action.payload.spinInterval,\r\n      };\r\n    \r\n    case 'SET_HOLDER_STATS':\r\n      return {\r\n        ...state,\r\n        holderStats: action.payload,\r\n      };\r\n    \r\n    case 'SET_WHEEL_DATA':\r\n      return {\r\n        ...state,\r\n        wheelData: action.payload,\r\n      };\r\n    \r\n    case 'SET_COUNTDOWN':\r\n      return {\r\n        ...state,\r\n        countdown: action.payload,\r\n      };\r\n    \r\n    case 'SET_SPINNING':\r\n      return {\r\n        ...state,\r\n        isSpinning: action.payload,\r\n      };\r\n    \r\n    case 'SET_WINNER':\r\n      return {\r\n        ...state,\r\n        currentWinner: action.payload,\r\n        isSpinning: false,\r\n      };\r\n    \r\n    case 'SET_LOADING':\r\n      return {\r\n        ...state,\r\n        loading: action.payload,\r\n      };\r\n    \r\n    case 'SET_ERROR':\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        loading: false,\r\n      };\r\n    \r\n    case 'CLEAR_ERROR':\r\n      return {\r\n        ...state,\r\n        error: null,\r\n      };\r\n\r\n    case 'SET_SOL_PRICE':\r\n      return {\r\n        ...state,\r\n        solPrice: action.payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialState = {\r\n  gameState: 'waiting',\r\n  currentPot: 0,\r\n  nextSpinTime: null,\r\n  currentGame: null,\r\n  recentGames: [],\r\n  isRunning: false,\r\n  spinInterval: 5,\r\n  holderStats: null,\r\n  wheelData: null,\r\n  countdown: null,\r\n  isSpinning: false,\r\n  currentWinner: null,\r\n  loading: true,\r\n  error: null,\r\n  solPrice: 180, // Default fallback price\r\n};\r\n\r\nexport const GameProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(gameReducer, initialState);\r\n  const { socket, isConnected, gameState, holderStats, countdown } = useSocket();\r\n\r\n  // API base URL\r\n  const API_BASE = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\n  // Update state from socket context\r\n  useEffect(() => {\r\n    if (gameState) {\r\n      dispatch({ type: 'SET_GAME_STATE', payload: gameState });\r\n    }\r\n  }, [gameState]);\r\n\r\n  useEffect(() => {\r\n    if (holderStats) {\r\n      dispatch({ type: 'SET_HOLDER_STATS', payload: holderStats });\r\n    }\r\n  }, [holderStats]);\r\n\r\n  useEffect(() => {\r\n    if (countdown) {\r\n      dispatch({ type: 'SET_COUNTDOWN', payload: countdown });\r\n    }\r\n  }, [countdown]);\r\n\r\n  // Socket event handlers\r\n  useEffect(() => {\r\n    if (!socket) return;\r\n\r\n    const handleSpinStart = (data) => {\r\n      dispatch({ type: 'SET_SPINNING', payload: true });\r\n    };\r\n\r\n    const handleWinnerSelected = (data) => {\r\n      dispatch({ type: 'SET_WINNER', payload: data.winner });\r\n    };\r\n\r\n    const handlePayoutCompleted = (data) => {\r\n      // Refresh game state after payout\r\n      fetchGameState();\r\n    };\r\n\r\n    socket.on('spinStart', handleSpinStart);\r\n    socket.on('winnerSelected', handleWinnerSelected);\r\n    socket.on('payoutCompleted', handlePayoutCompleted);\r\n\r\n    return () => {\r\n      socket.off('spinStart', handleSpinStart);\r\n      socket.off('winnerSelected', handleWinnerSelected);\r\n      socket.off('payoutCompleted', handlePayoutCompleted);\r\n    };\r\n  }, [socket]);\r\n\r\n  // API functions\r\n  const fetchGameState = async () => {\r\n    try {\r\n      dispatch({ type: 'SET_LOADING', payload: true });\r\n      const response = await axios.get(`${API_BASE}/game/state`);\r\n      if (response.data.success) {\r\n        dispatch({ type: 'SET_GAME_STATE', payload: response.data.data });\r\n      }\r\n    } catch (error) {\r\n      console.warn('Backend not available, using demo data');\r\n      // Provide demo data when backend is not available\r\n      const demoData = {\r\n        gameState: 'waiting',\r\n        currentPot: 0.5,\r\n        nextSpinTime: new Date(Date.now() + 5 * 60 * 1000),\r\n        currentGame: null,\r\n        recentGames: [],\r\n        isRunning: false,\r\n        spinInterval: 5\r\n      };\r\n      dispatch({ type: 'SET_GAME_STATE', payload: demoData });\r\n    } finally {\r\n      dispatch({ type: 'SET_LOADING', payload: false });\r\n    }\r\n  };\r\n\r\n  const fetchWheelData = async () => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE}/game/wheel-data`);\r\n      if (response.data.success) {\r\n        dispatch({ type: 'SET_WHEEL_DATA', payload: response.data.data });\r\n      }\r\n    } catch (error) {\r\n      console.warn('Backend not available, using demo wheel data');\r\n      // Provide demo wheel data\r\n      const demoWheelData = {\r\n        distribution: [\r\n          { address: 'Demo1...abcd', balance: 1000000, percentage: 25 },\r\n          { address: 'Demo2...efgh', balance: 800000, percentage: 20 },\r\n          { address: 'Demo3...ijkl', balance: 600000, percentage: 15 },\r\n          { address: 'Demo4...mnop', balance: 400000, percentage: 10 },\r\n          { address: 'Demo5...qrst', balance: 200000, percentage: 5 },\r\n          { address: 'Demo6...uvwx', balance: 200000, percentage: 5 },\r\n          { address: 'Demo7...yzab', balance: 200000, percentage: 5 },\r\n          { address: 'Demo8...cdef', balance: 200000, percentage: 5 },\r\n          { address: 'Demo9...ghij', balance: 200000, percentage: 5 },\r\n          { address: 'Demo10...klmn', balance: 200000, percentage: 5 }\r\n        ],\r\n        totalEligible: 10,\r\n        minimumHold: 100000\r\n      };\r\n      dispatch({ type: 'SET_WHEEL_DATA', payload: demoWheelData });\r\n    }\r\n  };\r\n\r\n  const fetchHolderStats = async () => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE}/holders/stats`);\r\n      if (response.data.success) {\r\n        dispatch({ type: 'SET_HOLDER_STATS', payload: response.data.data });\r\n      }\r\n    } catch (error) {\r\n      console.warn('Backend not available, using demo holder stats');\r\n      // Provide demo holder stats\r\n      const demoHolderStats = {\r\n        totalHolders: 150,\r\n        eligibleHolders: 45,\r\n        totalSupply: 4000000,\r\n        minimumHoldAmount: 100000,\r\n        minimumHoldPercentage: 0.1,\r\n        lastUpdate: new Date(),\r\n        isTracking: false,\r\n        topHolders: [\r\n          { address: 'Demo1...abcd', balance: 1000000, percentage: 25, isEligible: true },\r\n          { address: 'Demo2...efgh', balance: 800000, percentage: 20, isEligible: true },\r\n          { address: 'Demo3...ijkl', balance: 600000, percentage: 15, isEligible: true }\r\n        ]\r\n      };\r\n      dispatch({ type: 'SET_HOLDER_STATS', payload: demoHolderStats });\r\n    }\r\n  };\r\n\r\n  const fetchGameHistory = async (limit = 10) => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE}/game/history?limit=${limit}`);\r\n      if (response.data.success) {\r\n        return response.data.data;\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to fetch game history:', error);\r\n      return [];\r\n    }\r\n  };\r\n\r\n  const fetchPayoutHistory = async (limit = 20) => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE}/transactions/payouts?limit=${limit}`);\r\n      if (response.data.success) {\r\n        return response.data.data;\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to fetch payout history:', error);\r\n      return [];\r\n    }\r\n  };\r\n\r\n  const checkHolderEligibility = async (address) => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE}/holders/check/${address}`);\r\n      if (response.data.success) {\r\n        return response.data.data;\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to check holder eligibility:', error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Initialize data on mount\r\n  useEffect(() => {\r\n    // Always try to fetch data, even if not connected initially\r\n    fetchGameState();\r\n    fetchWheelData();\r\n    fetchHolderStats();\r\n  }, []);\r\n\r\n  // Utility functions\r\n  const formatAddress = (address) => {\r\n    if (!address) return '';\r\n    return `${address.slice(0, 4)}...${address.slice(-4)}`;\r\n  };\r\n\r\n  const formatSOL = (lamports) => {\r\n    return (lamports / 1000000000).toFixed(4);\r\n  };\r\n\r\n  const formatTimeRemaining = (milliseconds) => {\r\n    if (!milliseconds || milliseconds <= 0) return '00:00';\r\n    \r\n    const totalSeconds = Math.floor(milliseconds / 1000);\r\n    const minutes = Math.floor(totalSeconds / 60);\r\n    const seconds = totalSeconds % 60;\r\n    \r\n    return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\r\n  };\r\n\r\n  const getGameStatusColor = (status) => {\r\n    switch (status) {\r\n      case 'waiting': return 'text-blue-400';\r\n      case 'spinning': return 'text-yellow-400';\r\n      case 'processing': return 'text-purple-400';\r\n      case 'completed': return 'text-green-400';\r\n      case 'paused': return 'text-red-400';\r\n      default: return 'text-gray-400';\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    ...state,\r\n    isConnected,\r\n    fetchGameState,\r\n    fetchWheelData,\r\n    fetchHolderStats,\r\n    fetchGameHistory,\r\n    fetchPayoutHistory,\r\n    checkHolderEligibility,\r\n    formatAddress,\r\n    formatSOL,\r\n    formatTimeRemaining,\r\n    getGameStatusColor,\r\n    clearError: () => dispatch({ type: 'CLEAR_ERROR' }),\r\n  };\r\n\r\n  return (\r\n    <GameContext.Provider value={value}>\r\n      {children}\r\n    </GameContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}