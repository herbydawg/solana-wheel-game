{"ast":null,"code":"var _jsxFileName = \"c:\\\\Users\\\\jakob\\\\Documents\\\\clips\\\\client\\\\src\\\\components\\\\CountdownTimer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CountdownTimer = ({\n  timeRemaining,\n  gameState\n}) => {\n  _s();\n  const [displayTime, setDisplayTime] = useState('00:00');\n  const [progress, setProgress] = useState(0);\n  const [localTimeRemaining, setLocalTimeRemaining] = useState(timeRemaining);\n  const [lastUpdateTime, setLastUpdateTime] = useState(null);\n  const totalTime = 5 * 60 * 1000; // 5 minutes in ms\n\n  // Update local time when server time changes - ensure proper reset\n  useEffect(() => {\n    if (timeRemaining && timeRemaining > 0 && timeRemaining <= totalTime) {\n      setLocalTimeRemaining(timeRemaining);\n      setLastUpdateTime(Date.now());\n    } else if (timeRemaining === 0 || !timeRemaining) {\n      setLocalTimeRemaining(0);\n      setProgress(0);\n    }\n  }, [timeRemaining, totalTime]);\n\n  // Smooth countdown using client-side timer\n  useEffect(() => {\n    if (gameState === 'waiting' && localTimeRemaining > 0) {\n      const interval = setInterval(() => {\n        setLocalTimeRemaining(prev => {\n          if (prev <= 1000) {\n            clearInterval(interval);\n            return 0;\n          }\n          return prev - 1000;\n        });\n      }, 1000);\n      return () => clearInterval(interval);\n    }\n  }, [gameState, localTimeRemaining]);\n  useEffect(() => {\n    if (localTimeRemaining && localTimeRemaining > 0) {\n      // Calculate display time\n      const totalSeconds = Math.floor(localTimeRemaining / 1000);\n      const minutes = Math.floor(totalSeconds / 60);\n      const seconds = totalSeconds % 60;\n      setDisplayTime(`${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`);\n\n      // Calculate progress (0-100) - reset to 0 when new countdown starts\n      // Use the actual time remaining as the basis for calculation\n      const elapsed = totalTime - localTimeRemaining;\n      const progressPercent = elapsed / totalTime * 100;\n      setProgress(Math.min(100, Math.max(0, progressPercent)));\n    } else {\n      setDisplayTime('00:00');\n      setProgress(gameState === 'spinning' ? 100 : 0);\n    }\n  }, [localTimeRemaining, gameState, totalTime]);\n  const getTimerColor = () => {\n    if (gameState === 'spinning') return '#f59e0b';\n    if (timeRemaining < 30000) return '#ef4444'; // Red for last 30 seconds\n    if (timeRemaining < 60000) return '#f59e0b'; // Yellow for last minute\n    return '#00d4ff'; // Blue for normal\n  };\n  const getStatusText = () => {\n    switch (gameState) {\n      case 'spinning':\n        return 'SPINNING...';\n      case 'processing':\n        return 'PROCESSING...';\n      case 'completed':\n        return 'COMPLETED';\n      case 'paused':\n        return 'PAUSED';\n      default:\n        return 'NEXT SPIN IN';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(motion.div, {\n    initial: {\n      opacity: 0,\n      scale: 0.8\n    },\n    animate: {\n      opacity: 1,\n      scale: 1\n    },\n    className: \"flex flex-col items-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center mb-2\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-gray-400 text-xs font-medium mb-1\",\n        children: getStatusText()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), gameState === 'waiting' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-white text-lg font-bold font-cyber\",\n        children: displayTime\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"relative w-24 h-24 mb-2\",\n      children: [/*#__PURE__*/_jsxDEV(CircularProgressbar, {\n        value: progress,\n        styles: buildStyles({\n          pathColor: getTimerColor(),\n          trailColor: 'rgba(255, 255, 255, 0.1)',\n          strokeLinecap: 'round',\n          pathTransitionDuration: 1\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute inset-0 flex items-center justify-center\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center\",\n          children: gameState === 'spinning' ? /*#__PURE__*/_jsxDEV(motion.div, {\n            animate: {\n              rotate: 360\n            },\n            transition: {\n              duration: 1,\n              repeat: Infinity,\n              ease: 'linear'\n            },\n            className: \"text-lg\",\n            children: \"\\uD83C\\uDFB0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 15\n          }, this) : gameState === 'processing' ? /*#__PURE__*/_jsxDEV(motion.div, {\n            animate: {\n              scale: [1, 1.2, 1]\n            },\n            transition: {\n              duration: 1,\n              repeat: Infinity\n            },\n            className: \"text-lg\",\n            children: \"\\u26A1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-white text-sm font-bold font-mono\",\n            children: displayTime\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"glass px-3 py-1 rounded-full\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-gray-400 text-xs\",\n          children: gameState === 'waiting' ? 'Auto-spin 5min' : gameState === 'spinning' ? 'Selecting...' : gameState === 'processing' ? 'Processing...' : 'Updated'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s(CountdownTimer, \"i+FojMyV85zza7EvXSyoC4hnDtw=\");\n_c = CountdownTimer;\nexport default CountdownTimer;\nvar _c;\n$RefreshReg$(_c, \"CountdownTimer\");","map":{"version":3,"names":["React","useState","useEffect","motion","CircularProgressbar","buildStyles","jsxDEV","_jsxDEV","CountdownTimer","timeRemaining","gameState","_s","displayTime","setDisplayTime","progress","setProgress","localTimeRemaining","setLocalTimeRemaining","lastUpdateTime","setLastUpdateTime","totalTime","Date","now","interval","setInterval","prev","clearInterval","totalSeconds","Math","floor","minutes","seconds","toString","padStart","elapsed","progressPercent","min","max","getTimerColor","getStatusText","div","initial","opacity","scale","animate","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","styles","pathColor","trailColor","strokeLinecap","pathTransitionDuration","rotate","transition","duration","repeat","Infinity","ease","_c","$RefreshReg$"],"sources":["c:/Users/jakob/Documents/clips/client/src/components/CountdownTimer.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\r\nimport 'react-circular-progressbar/dist/styles.css';\r\n\r\nconst CountdownTimer = ({ timeRemaining, gameState }) => {\r\n  const [displayTime, setDisplayTime] = useState('00:00');\r\n  const [progress, setProgress] = useState(0);\r\n  const [localTimeRemaining, setLocalTimeRemaining] = useState(timeRemaining);\r\n  const [lastUpdateTime, setLastUpdateTime] = useState(null);\r\n  const totalTime = 5 * 60 * 1000; // 5 minutes in ms\r\n\r\n  // Update local time when server time changes - ensure proper reset\r\n  useEffect(() => {\r\n    if (timeRemaining && timeRemaining > 0 && timeRemaining <= totalTime) {\r\n      setLocalTimeRemaining(timeRemaining);\r\n      setLastUpdateTime(Date.now());\r\n    } else if (timeRemaining === 0 || !timeRemaining) {\r\n      setLocalTimeRemaining(0);\r\n      setProgress(0);\r\n    }\r\n  }, [timeRemaining, totalTime]);\r\n\r\n  // Smooth countdown using client-side timer\r\n  useEffect(() => {\r\n    if (gameState === 'waiting' && localTimeRemaining > 0) {\r\n      const interval = setInterval(() => {\r\n        setLocalTimeRemaining(prev => {\r\n          if (prev <= 1000) {\r\n            clearInterval(interval);\r\n            return 0;\r\n          }\r\n          return prev - 1000;\r\n        });\r\n      }, 1000);\r\n\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [gameState, localTimeRemaining]);\r\n\r\n  useEffect(() => {\r\n    if (localTimeRemaining && localTimeRemaining > 0) {\r\n      // Calculate display time\r\n      const totalSeconds = Math.floor(localTimeRemaining / 1000);\r\n      const minutes = Math.floor(totalSeconds / 60);\r\n      const seconds = totalSeconds % 60;\r\n\r\n      setDisplayTime(`${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`);\r\n\r\n      // Calculate progress (0-100) - reset to 0 when new countdown starts\r\n      // Use the actual time remaining as the basis for calculation\r\n      const elapsed = totalTime - localTimeRemaining;\r\n      const progressPercent = (elapsed / totalTime) * 100;\r\n      setProgress(Math.min(100, Math.max(0, progressPercent)));\r\n    } else {\r\n      setDisplayTime('00:00');\r\n      setProgress(gameState === 'spinning' ? 100 : 0);\r\n    }\r\n  }, [localTimeRemaining, gameState, totalTime]);\r\n\r\n  const getTimerColor = () => {\r\n    if (gameState === 'spinning') return '#f59e0b';\r\n    if (timeRemaining < 30000) return '#ef4444'; // Red for last 30 seconds\r\n    if (timeRemaining < 60000) return '#f59e0b'; // Yellow for last minute\r\n    return '#00d4ff'; // Blue for normal\r\n  };\r\n\r\n  const getStatusText = () => {\r\n    switch (gameState) {\r\n      case 'spinning': return 'SPINNING...';\r\n      case 'processing': return 'PROCESSING...';\r\n      case 'completed': return 'COMPLETED';\r\n      case 'paused': return 'PAUSED';\r\n      default: return 'NEXT SPIN IN';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <motion.div\r\n      initial={{ opacity: 0, scale: 0.8 }}\r\n      animate={{ opacity: 1, scale: 1 }}\r\n      className=\"flex flex-col items-center\"\r\n    >\r\n      {/* Status Text - Compact */}\r\n      <div className=\"text-center mb-2\">\r\n        <div className=\"text-gray-400 text-xs font-medium mb-1\">\r\n          {getStatusText()}\r\n        </div>\r\n        {gameState === 'waiting' && (\r\n          <div className=\"text-white text-lg font-bold font-cyber\">\r\n            {displayTime}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Circular Progress - Compact */}\r\n      <div className=\"relative w-24 h-24 mb-2\">\r\n        <CircularProgressbar\r\n          value={progress}\r\n          styles={buildStyles({\r\n            pathColor: getTimerColor(),\r\n            trailColor: 'rgba(255, 255, 255, 0.1)',\r\n            strokeLinecap: 'round',\r\n            pathTransitionDuration: 1,\r\n          })}\r\n        />\r\n\r\n        {/* Center Content - Compact */}\r\n        <div className=\"absolute inset-0 flex items-center justify-center\">\r\n          <div className=\"text-center\">\r\n            {gameState === 'spinning' ? (\r\n              <motion.div\r\n                animate={{ rotate: 360 }}\r\n                transition={{ duration: 1, repeat: Infinity, ease: 'linear' }}\r\n                className=\"text-lg\"\r\n              >\r\n                🎰\r\n              </motion.div>\r\n            ) : gameState === 'processing' ? (\r\n              <motion.div\r\n                animate={{ scale: [1, 1.2, 1] }}\r\n                transition={{ duration: 1, repeat: Infinity }}\r\n                className=\"text-lg\"\r\n              >\r\n                ⚡\r\n              </motion.div>\r\n            ) : (\r\n              <div className=\"text-white text-sm font-bold font-mono\">\r\n                {displayTime}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Additional Info - Compact */}\r\n      <div className=\"text-center\">\r\n        <div className=\"glass px-3 py-1 rounded-full\">\r\n          <span className=\"text-gray-400 text-xs\">\r\n            {gameState === 'waiting' ? 'Auto-spin 5min' :\r\n             gameState === 'spinning' ? 'Selecting...' :\r\n             gameState === 'processing' ? 'Processing...' :\r\n             'Updated'}\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </motion.div>\r\n  );\r\n};\r\n\r\nexport default CountdownTimer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}